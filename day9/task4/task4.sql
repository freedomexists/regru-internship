1) Что такое реляционная база данных?

- Набор таблиц между которыми существуют отношения (связь). С помощью запросов можем получать набор данных из нескольких связанных таблиц.

2) Что такое нормализация и денормализация БД? Для чего они нужны? Какие проблемы они могут вызвать?

- Нормализация - процесс приведения структуры БД к виду, который гарантирует отсутсвие избыточности (но это не точно),
а так же обеспечиваюющий связность таблиц. Иногда это влечет к появлению сложных запросов с множеством джоинов, что бьет по производителности
 и быстродействию системы.
- Денормализация - обратный процесс внесения избыточных данных в таблицы. Наверное, можно таким образом
оптимизировать частые запросы, которые требуют сложных вычислений или большое кол-во джоинов.
Думаю, тут будут возникать проблемы с расхождением дублирующихся данных. Поддерживать денормализированную базу сложнее.
Ну и придется платить за хранение большего объема данных.

3) Что такое транзакции? Для чего они нужны? Что такое ACID?
- Транзакция - это группа запросов к бд, изменяющих ее состояние. Транзакция выполняется полностью, либо не выполняется вовсе.
ACID - это свойтва транзакций.
А - атомарность (выполняется все или ничего)
С - согласованность. (транзакция обращаясь к целостной бд, переводит бд в другое целостное состояние после коммита)
I - изолированность. (нельзя одновременно проводить операции над одними данными)
D - долговечность. (если транзакция завершена успешно, в бд должны сохраниться результаты транзакции, даже если в следующую секунду все упало)

4) Что такое индексы? Для чего они нужны?
- Индексы - это дополнительные данные для поля таблицы, которые нужны для облегчения поиска.

5) В чём разница между операторами INSERT, REPLACE и UPDATE?
INSERT - добавляет новые данные в таблицу.
REPLACE - изменяет значение поля. Можно частично. Нужно передать само поле, что менять и на что менять
UPDATE - изменяет уже имеющиеся данные в таблице полностью.


6) В чём разница между операторами DELETE, TRUNCATE и DROP?
DELETE - удаляет строки из таблиц (временных в т.ч.). Можно задать условие. Возвращет число удаленных строк. Блокирует каждую строку. Логгируется, можно откатить.
TRUNCATE - очищает таблицу, удаляя таблицу и создавая ее заново. Возвращает ноль. Блокирует всю таблицу. Не работает для таблиц с внешними ключами. Нельзя откатить.
DROP - удаляет таблицу или БД

7) Из каких основных частей состоит оператор SELECT?
Что выбираем (спислк столбцов), из чего выбираем (таблица или представление), условие выбора, условия групировки, критерии сортировки

8) Какие виды JOIN есть в MySQL? Чем они отличаются?
INNER JOIN - выбираются только совпадающие данные из объединяемых таблиц.
CROSS JOIN - декартово объединение двух таблиц (каждая строка Т1 с каждой строкой Т2)
OUTER (left, right, full) JOIN - выбираются совпадающие данные. К ним добавляются данные левой/правой/обеих таблиц. Пустые поля заполняются NULL
SELF JOIN - объединение таблицы самой с собой будто это две разные таблицы

9) Есть ли разница в скорости работы между:

   LIKE ‘test’
   LIKE ‘test%’
   LIKE ‘%test%’

 - Есть.
 Почему?
 - Если поля проиндексированы в первых двух случаях поиск будет проходить по индексам. Что даст сложность log(O).
 Хотя, я где-то читал, что все не так однозначно и искать может и не по индексу. Но в любом случае это должно быть бинарное дерево для первых двух запросов
 P.S. Интересно LIKE ‘test’ работает так же как = ‘test’?

10) Чем отличается задание условий с помощью HAVING и WHERE?
WHERE выполняется до запроса HAVING после. Что дает возможность использовать HAVING для фильтрации выдачи запроса с агрегатными функциями

11) Чем отличается char (n) от varchar (n)?
char - имеет фиксированную длину n
varchar - переменную длинну не превышающую n


12) Никодим немного суеверен, поэтому, когда ему нужно удалить какие-то записи из таблицы, он сначала пишет в консоли
 условие WHERE для строк, которые нужно удалить, и только потом добавляет к нему DELETE FROM tbl_name.
 Почему Никодим считает плохой приметой писать оператор DELETE в обычном порядке?

- Вероятно он боится очистить таблицу. Хотя вроде есть rollback.